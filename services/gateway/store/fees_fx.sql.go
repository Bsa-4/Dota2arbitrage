// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fees_fx.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const upsertFee = `-- name: UpsertFee :one
INSERT INTO fees(market_id, kind, percent_bps, fixed_minor)
VALUES ($1, $2, $3, $4)
ON CONFLICT (market_id, kind)
DO UPDATE SET percent_bps = EXCLUDED.percent_bps,
              fixed_minor = EXCLUDED.fixed_minor
RETURNING id, market_id, kind, percent_bps, fixed_minor, created_at
`

type UpsertFeeParams struct {
	MarketID   int32  `json:"market_id"`
	Kind       string `json:"kind"`
	PercentBps int32  `json:"percent_bps"`
	FixedMinor int64  `json:"fixed_minor"`
}

func (q *Queries) UpsertFee(ctx context.Context, arg UpsertFeeParams) (Fee, error) {
	row := q.db.QueryRow(ctx, upsertFee,
		arg.MarketID,
		arg.Kind,
		arg.PercentBps,
		arg.FixedMinor,
	)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.Kind,
		&i.PercentBps,
		&i.FixedMinor,
		&i.CreatedAt,
	)
	return i, err
}

const upsertFx = `-- name: UpsertFx :one
INSERT INTO fx_rates(base, quote, rate)
VALUES ($1, $2, $3)
ON CONFLICT (base, quote)
DO UPDATE SET rate = EXCLUDED.rate, as_of = now()
RETURNING id, base, quote, rate, as_of
`

type UpsertFxParams struct {
	Base  string         `json:"base"`
	Quote string         `json:"quote"`
	Rate  pgtype.Numeric `json:"rate"`
}

func (q *Queries) UpsertFx(ctx context.Context, arg UpsertFxParams) (FxRate, error) {
	row := q.db.QueryRow(ctx, upsertFx, arg.Base, arg.Quote, arg.Rate)
	var i FxRate
	err := row.Scan(
		&i.ID,
		&i.Base,
		&i.Quote,
		&i.Rate,
		&i.AsOf,
	)
	return i, err
}
