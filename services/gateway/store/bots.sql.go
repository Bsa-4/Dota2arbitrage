// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bots.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots(name, vps_label, status, market_accounts_json)
VALUES ($1, $2, 'offline', COALESCE($3, '{}'::jsonb))
RETURNING id, name, vps_label, status, last_heartbeat_at, created_at
`

type CreateBotParams struct {
	Name     string      `json:"name"`
	VpsLabel string      `json:"vps_label"`
	Column3  interface{} `json:"column_3"`
}

type CreateBotRow struct {
	ID              int32              `json:"id"`
	Name            string             `json:"name"`
	VpsLabel        string             `json:"vps_label"`
	Status          string             `json:"status"`
	LastHeartbeatAt pgtype.Timestamptz `json:"last_heartbeat_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (CreateBotRow, error) {
	row := q.db.QueryRow(ctx, createBot, arg.Name, arg.VpsLabel, arg.Column3)
	var i CreateBotRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VpsLabel,
		&i.Status,
		&i.LastHeartbeatAt,
		&i.CreatedAt,
	)
	return i, err
}

const heartbeatBot = `-- name: HeartbeatBot :one
UPDATE bots
SET status = $2,
    last_heartbeat_at = now()
WHERE id = $1
RETURNING id, name, vps_label, status, last_heartbeat_at, created_at
`

type HeartbeatBotParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

type HeartbeatBotRow struct {
	ID              int32              `json:"id"`
	Name            string             `json:"name"`
	VpsLabel        string             `json:"vps_label"`
	Status          string             `json:"status"`
	LastHeartbeatAt pgtype.Timestamptz `json:"last_heartbeat_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) HeartbeatBot(ctx context.Context, arg HeartbeatBotParams) (HeartbeatBotRow, error) {
	row := q.db.QueryRow(ctx, heartbeatBot, arg.ID, arg.Status)
	var i HeartbeatBotRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VpsLabel,
		&i.Status,
		&i.LastHeartbeatAt,
		&i.CreatedAt,
	)
	return i, err
}

const listBots = `-- name: ListBots :many
SELECT id, name, vps_label, status, last_heartbeat_at, created_at
FROM bots
ORDER BY id
`

type ListBotsRow struct {
	ID              int32              `json:"id"`
	Name            string             `json:"name"`
	VpsLabel        string             `json:"vps_label"`
	Status          string             `json:"status"`
	LastHeartbeatAt pgtype.Timestamptz `json:"last_heartbeat_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListBots(ctx context.Context) ([]ListBotsRow, error) {
	rows, err := q.db.Query(ctx, listBots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBotsRow{}
	for rows.Next() {
		var i ListBotsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.VpsLabel,
			&i.Status,
			&i.LastHeartbeatAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
