// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: markets.sql

package store

import (
	"context"
)

const createMarket = `-- name: CreateMarket :one
INSERT INTO markets(code, name, currency)
VALUES ($1, $2, $3)
RETURNING id, code, name, currency, created_at
`

type CreateMarketParams struct {
	Code     string `json:"code"`
	Name     string `json:"name"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateMarket(ctx context.Context, arg CreateMarketParams) (Market, error) {
	row := q.db.QueryRow(ctx, createMarket, arg.Code, arg.Name, arg.Currency)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listMarkets = `-- name: ListMarkets :many
SELECT id, code, name, currency, created_at
FROM markets
ORDER BY id
`

func (q *Queries) ListMarkets(ctx context.Context) ([]Market, error) {
	rows, err := q.db.Query(ctx, listMarkets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Market{}
	for rows.Next() {
		var i Market
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
